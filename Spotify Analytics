# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# At last, I performed analytics on the data using SQL. 

-- Creating the table:
CREATE TABLE EAM_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

# Then I inserted the Spotify data . csv into the table as Spotifydata

# Next, I explored the data using the following SQL:

SELECT * FROM EAM_DB.Spotifydata;

-- Who are the top 5 tracks based on popularity and who are the artists?
SELECT track_name ,artist_name, popularity
FROM EAM_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 5;

--What are the 5 less popular tracks in this data based on popularity?
SELECT artist_name, track_name, popularity
FROM EAM_DB.Spotifydata
ORDER BY popularity ASC
LIMIT 5;

-- What is the popularity by artist and track?
SELECT artist_name, track_name, popularity
FROM EAM_DB.Spotifydata
GROUP BY artist_name, track_name;


WITH popularity_average_CTE AS (
SELECT s.artist_name, AVG(s.popularity) AS average_popularity
FROM Spotifydata s
GROUP BY s.artist_name)

SELECT artist_name, average_popularity, 'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity >=90;
